{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PySiddhi PySiddhi is a Python wrapper for Siddhi . Which can listens to events from data streams, detects complex conditions described via a Streaming SQL language , and triggers actions. It performs both Stream Processing and Complex Event Processing on streaming data. Its Siddhi core is written in Java library. PySiddhi wraps Siddhi 5 Content Introduction and Quick Demo (this page) Installation Guide Run PySiddhi Debug PySiddhi Advanced Concepts of PySiddhi Features [x] Basic functionality of Siddhi 5.x.x [x] Siddhi Debugger [x] Support to Siddhi Extensions Loading Installation PySiddhi can be installed using pip. pip install pysiddhi For detail insulation and prerequisite refer section on Installation Guide . Quick Demo Following is a quick demo of how to use PySiddhi. For comprehensive demo please refer Quick-Demo-PySiddhi Step 1 - Define filter using Siddhi Query. siddhiManager = SiddhiManager() # Siddhi Query to filter events with volume less than 150 as output siddhiApp = \"define stream cseEventStream (symbol string, price float, volume long);\" + \\ \"@info(name = 'query1') \" + \\ \"from cseEventStream[volume < 150] \" + \\ \"select symbol, price \" + \\ \"insert into outputStream;\" # Generate runtime siddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp) For more details on Siddhi Query Language, refer Siddhi Query Language Guide . Step 2 - Define a listener for filtered events. # Add listener to capture output events class QueryCallbackImpl(QueryCallback): def receive(self, timestamp, inEvents, outEvents): PrintEvent(timestamp, inEvents, outEvents) siddhiAppRuntime.addCallback(\"query1\",QueryCallbackImpl()) Step 3 - Test filter query using sample input events. # Retrieving input handler to push events into Siddhi inputHandler = siddhiAppRuntime.getInputHandler(\"cseEventStream\") # Starting event processing siddhiAppRuntime.start() # Sending events to Siddhi inputHandler.send([\"IBM\",700.0,LongType(100)]) inputHandler.send([\"WSO2\", 60.5, LongType(200)]) inputHandler.send([\"GOOG\", 50, LongType(30)]) inputHandler.send([\"IBM\", 76.6, LongType(400)]) inputHandler.send([\"WSO2\", 45.6, LongType(50)]) # Wait for response sleep(0.1) Output The 3 events with volume less than 150 are printed in log. INFO EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null } Clean Up - Remember to shutdown the Siddhi Manager when your done. siddhiManager.shutdown() Contribution PySiddhi is initiated by a project for Google Summer of Code 2017 Program. Contributed by: Madhawa Vidanapathirana Email: madhawavidanapathirana@gmail.com Organization: University of Moratuwa, Sri Lanka. Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#pysiddhi","text":"PySiddhi is a Python wrapper for Siddhi . Which can listens to events from data streams, detects complex conditions described via a Streaming SQL language , and triggers actions. It performs both Stream Processing and Complex Event Processing on streaming data. Its Siddhi core is written in Java library. PySiddhi wraps Siddhi 5","title":"PySiddhi"},{"location":"#content","text":"Introduction and Quick Demo (this page) Installation Guide Run PySiddhi Debug PySiddhi Advanced Concepts of PySiddhi","title":"Content"},{"location":"#features","text":"[x] Basic functionality of Siddhi 5.x.x [x] Siddhi Debugger [x] Support to Siddhi Extensions Loading","title":"Features"},{"location":"#installation","text":"PySiddhi can be installed using pip. pip install pysiddhi For detail insulation and prerequisite refer section on Installation Guide .","title":"Installation"},{"location":"#quick-demo","text":"Following is a quick demo of how to use PySiddhi. For comprehensive demo please refer Quick-Demo-PySiddhi Step 1 - Define filter using Siddhi Query. siddhiManager = SiddhiManager() # Siddhi Query to filter events with volume less than 150 as output siddhiApp = \"define stream cseEventStream (symbol string, price float, volume long);\" + \\ \"@info(name = 'query1') \" + \\ \"from cseEventStream[volume < 150] \" + \\ \"select symbol, price \" + \\ \"insert into outputStream;\" # Generate runtime siddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp) For more details on Siddhi Query Language, refer Siddhi Query Language Guide . Step 2 - Define a listener for filtered events. # Add listener to capture output events class QueryCallbackImpl(QueryCallback): def receive(self, timestamp, inEvents, outEvents): PrintEvent(timestamp, inEvents, outEvents) siddhiAppRuntime.addCallback(\"query1\",QueryCallbackImpl()) Step 3 - Test filter query using sample input events. # Retrieving input handler to push events into Siddhi inputHandler = siddhiAppRuntime.getInputHandler(\"cseEventStream\") # Starting event processing siddhiAppRuntime.start() # Sending events to Siddhi inputHandler.send([\"IBM\",700.0,LongType(100)]) inputHandler.send([\"WSO2\", 60.5, LongType(200)]) inputHandler.send([\"GOOG\", 50, LongType(30)]) inputHandler.send([\"IBM\", 76.6, LongType(400)]) inputHandler.send([\"WSO2\", 45.6, LongType(50)]) # Wait for response sleep(0.1) Output The 3 events with volume less than 150 are printed in log. INFO EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null } Clean Up - Remember to shutdown the Siddhi Manager when your done. siddhiManager.shutdown()","title":"Quick Demo"},{"location":"#contribution","text":"PySiddhi is initiated by a project for Google Summer of Code 2017 Program. Contributed by: Madhawa Vidanapathirana Email: madhawavidanapathirana@gmail.com Organization: University of Moratuwa, Sri Lanka.","title":"Contribution"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"Debugging-Siddhi-Queries/","text":"Debug PySiddhi Siddhi Queries can be debugged at run time via PySiddhi. It suppots following features with its Python APIs. Add Siddhi Debugger Callbacks Acquiring and Releasing Breakpoints in Siddhi Queries Querying details about Siddhi Query State Debugging Multi-threaded Siddhi Apps Using Breakpoints and Siddhi Debugger Callbacks Using Siddhi Debugger, it is possible to break the query execution on occurrences of designated events (input or output events) and analyze the state of the query. Placing a breakpoint would cause Siddhi Debugger Callback to be triggered whenever a breakpoint is reached. The following code snippet demonstrates a basic usage of Siddhi Debugger. # Obtain siddhi debugger from Siddhi App Runtime. siddhiDebugger = siddhiAppRuntime.debug() # Place a breakpoint. siddhiDebugger.acquireBreakPoint(\"query 1\", SiddhiDebugger.QueryTerminal.IN) # Setup a callback to receive debug events. class SiddhiDebuggerCallbackImpl(SiddhiDebuggerCallback): def debugEvent(self, event, queryName,queryTerminal, debugger): logging.info(\"Query: \" + queryName + \":\" + queryTerminal.name) logging.info(event) # Do assertions on event and check for special cases. # Obtain next debuggable element of breakpoint. # Alternatively can call debugger.play() to ignore pending # debuggable elements and continue from breakpoint. debugger.next() # Assign the debugger callback siddhiDebugger.setDebuggerCallback(SiddhiDebuggerCallbackImpl()) # Send test inputs using inputHandler inputHandler.send([\"WSO2\", 50.0, 60]) inputHandler.send([\"WSO2\", 70.0, 40]) For the complete code on above example and many other examples refer Siddhi Debugger Tests .","title":"Debug PySiddhi"},{"location":"Debugging-Siddhi-Queries/#debug-pysiddhi","text":"Siddhi Queries can be debugged at run time via PySiddhi. It suppots following features with its Python APIs. Add Siddhi Debugger Callbacks Acquiring and Releasing Breakpoints in Siddhi Queries Querying details about Siddhi Query State Debugging Multi-threaded Siddhi Apps","title":"Debug PySiddhi"},{"location":"Debugging-Siddhi-Queries/#using-breakpoints-and-siddhi-debugger-callbacks","text":"Using Siddhi Debugger, it is possible to break the query execution on occurrences of designated events (input or output events) and analyze the state of the query. Placing a breakpoint would cause Siddhi Debugger Callback to be triggered whenever a breakpoint is reached. The following code snippet demonstrates a basic usage of Siddhi Debugger. # Obtain siddhi debugger from Siddhi App Runtime. siddhiDebugger = siddhiAppRuntime.debug() # Place a breakpoint. siddhiDebugger.acquireBreakPoint(\"query 1\", SiddhiDebugger.QueryTerminal.IN) # Setup a callback to receive debug events. class SiddhiDebuggerCallbackImpl(SiddhiDebuggerCallback): def debugEvent(self, event, queryName,queryTerminal, debugger): logging.info(\"Query: \" + queryName + \":\" + queryTerminal.name) logging.info(event) # Do assertions on event and check for special cases. # Obtain next debuggable element of breakpoint. # Alternatively can call debugger.play() to ignore pending # debuggable elements and continue from breakpoint. debugger.next() # Assign the debugger callback siddhiDebugger.setDebuggerCallback(SiddhiDebuggerCallbackImpl()) # Send test inputs using inputHandler inputHandler.send([\"WSO2\", 50.0, 60]) inputHandler.send([\"WSO2\", 70.0, 40]) For the complete code on above example and many other examples refer Siddhi Debugger Tests .","title":"Using Breakpoints and Siddhi Debugger Callbacks"},{"location":"Installation-Guide/","text":"Installation Guide The current version is tested with Microsoft Windows and Unix/Linux based operating systems. PySiddhi can be installed using one of the following methods. Install PySiddhi Prerequisites The following dependencies should be installed prior to installation of library. Linux Python 2.7 or 3.x Cython sudo pip install cython Python Developer Package sudo apt-get install python-dev python3-dev python-dev Oracle Java 8 and set JAVA_HOME path libboost for Python (Only to build from Source) sudo apt-get install libboost-python-dev Maven (Only to build from Source) g++ and other development tools (Only to build from Source) sudo apt-get install build-essential g++ autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev macOS Install brew Install python using brew Cython sudo pip install cython Oracle Java 8 and set JAVA_HOME path boost for python (Only to build from Source) brew install boost Maven (Only to build from Source) Windows Install Python Cython sudo pip install cython Oracle Java 8 and set JAVA_HOME path Install Visual Studio Build tools (Only to build from Source) Maven (Only to build from Source) Download siddhi-sdk release from here and set the SIDDHISDK_HOME as an environment variable. export SIDDHISDK_HOME=\"<path-to-siddhi-sdk>\" Download siddhi-python-api-proxy-5.0.0.jar from here and copy to <SIDDHISDK_HOME>/lib directory Install PySiddhi via Python Package Management PySiddhi can be installed via PIP command as bellow. pip install pysiddhi Install PySiddhi from Online Code Using the following PIP command, PySiddhi can be directly installed from online code available in GitHub. pip install git+https://github.com/siddhi-io/PySiddhi.git Note: In case of permission errors, use sudo Install from Downloaded Code Switch to the branch master of PySiddhi. Navigate to source code root directory and execute the following PIP command. pip install . Note the period (.) at end of command. In case of permission errors, use sudo Uninstall PySiddhi If the library has been installed as explained above, it could be uninstalled using the following pip command. pip uninstall pysiddhi","title":"Installation Guide"},{"location":"Installation-Guide/#installation-guide","text":"The current version is tested with Microsoft Windows and Unix/Linux based operating systems. PySiddhi can be installed using one of the following methods.","title":"Installation Guide"},{"location":"Installation-Guide/#install-pysiddhi","text":"","title":"Install PySiddhi"},{"location":"Installation-Guide/#prerequisites","text":"The following dependencies should be installed prior to installation of library. Linux Python 2.7 or 3.x Cython sudo pip install cython Python Developer Package sudo apt-get install python-dev python3-dev python-dev Oracle Java 8 and set JAVA_HOME path libboost for Python (Only to build from Source) sudo apt-get install libboost-python-dev Maven (Only to build from Source) g++ and other development tools (Only to build from Source) sudo apt-get install build-essential g++ autotools-dev libicu-dev build-essential libbz2-dev libboost-all-dev macOS Install brew Install python using brew Cython sudo pip install cython Oracle Java 8 and set JAVA_HOME path boost for python (Only to build from Source) brew install boost Maven (Only to build from Source) Windows Install Python Cython sudo pip install cython Oracle Java 8 and set JAVA_HOME path Install Visual Studio Build tools (Only to build from Source) Maven (Only to build from Source) Download siddhi-sdk release from here and set the SIDDHISDK_HOME as an environment variable. export SIDDHISDK_HOME=\"<path-to-siddhi-sdk>\" Download siddhi-python-api-proxy-5.0.0.jar from here and copy to <SIDDHISDK_HOME>/lib directory","title":"Prerequisites"},{"location":"Installation-Guide/#install-pysiddhi-via-python-package-management","text":"PySiddhi can be installed via PIP command as bellow. pip install pysiddhi","title":"Install PySiddhi via Python Package Management"},{"location":"Installation-Guide/#install-pysiddhi-from-online-code","text":"Using the following PIP command, PySiddhi can be directly installed from online code available in GitHub. pip install git+https://github.com/siddhi-io/PySiddhi.git Note: In case of permission errors, use sudo","title":"Install PySiddhi from Online Code"},{"location":"Installation-Guide/#install-from-downloaded-code","text":"Switch to the branch master of PySiddhi. Navigate to source code root directory and execute the following PIP command. pip install . Note the period (.) at end of command. In case of permission errors, use sudo","title":"Install from Downloaded Code"},{"location":"Installation-Guide/#uninstall-pysiddhi","text":"If the library has been installed as explained above, it could be uninstalled using the following pip command. pip uninstall pysiddhi","title":"Uninstall PySiddhi"},{"location":"Run-PySiddhi/","text":"Run PySiddhi The following is a sample demonstrating how to rung PySiddhi. Sample This sample demonstrating how to write a streaming query to detect stock records having volume less than 150. This code uses Siddhi 5.0 queries with PySiddhi. from PySiddhi.DataTypes.LongType import LongType from PySiddhi.core.SiddhiManager import SiddhiManager from PySiddhi.core.query.output.callback.QueryCallback import QueryCallback from PySiddhi.core.util.EventPrinter import PrintEvent from time import sleep siddhiManager = SiddhiManager() # Siddhi Query to filter events with volume less than 150 as output siddhiApp = \"define stream cseEventStream (symbol string, price float, volume long); \" + \\ \"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\" # Generate runtime siddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp) # Add listener to capture output events class QueryCallbackImpl(QueryCallback): def receive(self, timestamp, inEvents, outEvents): PrintEvent(timestamp, inEvents, outEvents) siddhiAppRuntime.addCallback(\"query1\",QueryCallbackImpl()) # Retrieving input handler to push events into Siddhi inputHandler = siddhiAppRuntime.getInputHandler(\"cseEventStream\") # Starting event processing siddhiAppRuntime.start() # Sending events to Siddhi inputHandler.send([\"IBM\",700.0,LongType(100)]) inputHandler.send([\"WSO2\", 60.5, LongType(200)]) inputHandler.send([\"GOOG\", 50, LongType(30)]) inputHandler.send([\"IBM\", 76.6, LongType(400)]) inputHandler.send([\"WSO2\", 45.6, LongType(50)]) # Wait for response sleep(10) siddhiManager.shutdown() Explanation Above example is comprehensively described bellow: Initialize libraries and imports Add this file to working directory in order to enable log4j logging. Log4j is used by PrintEvent to generate output. from PySiddhi.DataTypes.LongType import LongType from PySiddhi.core.SiddhiManager import SiddhiManager from PySiddhi.core.query.output.callback.QueryCallback import QueryCallback from PySiddhi.core.util.EventPrinter import PrintEvent from time import sleep Define filter using Siddhi query siddhiManager = SiddhiManager() # Siddhi Query to filter events with volume less than 150 as output siddhiApp = \"define stream cseEventStream (symbol string, price float, volume long); \" + \\ \"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\" # Generate runtime siddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp) For more details on Siddhi Query Language, refer Siddhi Query Language Guide . Define a listener for filtered events # Add listener to capture output events class QueryCallbackImpl(QueryCallback): def receive(self, timestamp, inEvents, outEvents): PrintEvent(timestamp, inEvents, outEvents) siddhiAppRuntime.addCallback(\"query1\",QueryCallbackImpl()) Test filter using sample input events # Retrieving input handler to push events into Siddhi inputHandler = siddhiAppRuntime.getInputHandler(\"cseEventStream\") # Starting event processing siddhiAppRuntime.start() # Sending events to Siddhi inputHandler.send([\"IBM\",700.0,LongType(100)]) inputHandler.send([\"WSO2\", 60.5, LongType(200)]) inputHandler.send([\"GOOG\", 50, LongType(30)]) inputHandler.send([\"IBM\", 76.6, LongType(400)]) inputHandler.send([\"WSO2\", 45.6, LongType(50)]) # Wait for response sleep(0.1) Shutdown the Siddhi Manager when processing is done siddhiManager.shutdown() Expected Output The 3 events with volume less than 150 are printed in log. INFO EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }","title":"Run PySiddhi"},{"location":"Run-PySiddhi/#run-pysiddhi","text":"The following is a sample demonstrating how to rung PySiddhi.","title":"Run PySiddhi"},{"location":"Run-PySiddhi/#sample","text":"This sample demonstrating how to write a streaming query to detect stock records having volume less than 150. This code uses Siddhi 5.0 queries with PySiddhi. from PySiddhi.DataTypes.LongType import LongType from PySiddhi.core.SiddhiManager import SiddhiManager from PySiddhi.core.query.output.callback.QueryCallback import QueryCallback from PySiddhi.core.util.EventPrinter import PrintEvent from time import sleep siddhiManager = SiddhiManager() # Siddhi Query to filter events with volume less than 150 as output siddhiApp = \"define stream cseEventStream (symbol string, price float, volume long); \" + \\ \"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\" # Generate runtime siddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp) # Add listener to capture output events class QueryCallbackImpl(QueryCallback): def receive(self, timestamp, inEvents, outEvents): PrintEvent(timestamp, inEvents, outEvents) siddhiAppRuntime.addCallback(\"query1\",QueryCallbackImpl()) # Retrieving input handler to push events into Siddhi inputHandler = siddhiAppRuntime.getInputHandler(\"cseEventStream\") # Starting event processing siddhiAppRuntime.start() # Sending events to Siddhi inputHandler.send([\"IBM\",700.0,LongType(100)]) inputHandler.send([\"WSO2\", 60.5, LongType(200)]) inputHandler.send([\"GOOG\", 50, LongType(30)]) inputHandler.send([\"IBM\", 76.6, LongType(400)]) inputHandler.send([\"WSO2\", 45.6, LongType(50)]) # Wait for response sleep(10) siddhiManager.shutdown()","title":"Sample"},{"location":"Run-PySiddhi/#explanation","text":"Above example is comprehensively described bellow: Initialize libraries and imports Add this file to working directory in order to enable log4j logging. Log4j is used by PrintEvent to generate output. from PySiddhi.DataTypes.LongType import LongType from PySiddhi.core.SiddhiManager import SiddhiManager from PySiddhi.core.query.output.callback.QueryCallback import QueryCallback from PySiddhi.core.util.EventPrinter import PrintEvent from time import sleep Define filter using Siddhi query siddhiManager = SiddhiManager() # Siddhi Query to filter events with volume less than 150 as output siddhiApp = \"define stream cseEventStream (symbol string, price float, volume long); \" + \\ \"@info(name = 'query1') from cseEventStream[volume < 150] select symbol,price insert into outputStream;\" # Generate runtime siddhiAppRuntime = siddhiManager.createSiddhiAppRuntime(siddhiApp) For more details on Siddhi Query Language, refer Siddhi Query Language Guide . Define a listener for filtered events # Add listener to capture output events class QueryCallbackImpl(QueryCallback): def receive(self, timestamp, inEvents, outEvents): PrintEvent(timestamp, inEvents, outEvents) siddhiAppRuntime.addCallback(\"query1\",QueryCallbackImpl()) Test filter using sample input events # Retrieving input handler to push events into Siddhi inputHandler = siddhiAppRuntime.getInputHandler(\"cseEventStream\") # Starting event processing siddhiAppRuntime.start() # Sending events to Siddhi inputHandler.send([\"IBM\",700.0,LongType(100)]) inputHandler.send([\"WSO2\", 60.5, LongType(200)]) inputHandler.send([\"GOOG\", 50, LongType(30)]) inputHandler.send([\"IBM\", 76.6, LongType(400)]) inputHandler.send([\"WSO2\", 45.6, LongType(50)]) # Wait for response sleep(0.1) Shutdown the Siddhi Manager when processing is done siddhiManager.shutdown()","title":"Explanation"},{"location":"Run-PySiddhi/#expected-output","text":"The 3 events with volume less than 150 are printed in log. INFO EventPrinter - Events{ @timestamp = 1497708406678, inEvents = [Event{timestamp=1497708406678, id=-1, data=[IBM, 700.0], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406685, inEvents = [Event{timestamp=1497708406685, id=-1, data=[GOOG, 50], isExpired=false}], RemoveEvents = null } INFO EventPrinter - Events{ @timestamp = 1497708406687, inEvents = [Event{timestamp=1497708406687, id=-1, data=[WSO2, 45.6], isExpired=false}], RemoveEvents = null }","title":"Expected Output"},{"location":"Using-Siddhi-from-Python/","text":"Advanced Concepts of PySiddhi Key Points The PySiddhi API is a wrapper on Siddhi Java Library, exposing it's core features to Python. It is important to keep following points in mind when using PySiddhi API. It is a wrapper. Not a port. - Whenever you use the PySiddhi API, the Siddhi Java Library is loaded in background using Java Virtual Machine. The wrapper is focused on functionality provided by siddhi-core which is found in package io.siddhi.core . The future versions of API may have the ability to load Siddhi Extensions directly from Java Packages and use them in Siddhi Queries. However, the individual Java classes of extensions will not be wrapped. Only the classes that are required for API users are wrapped. Classes which are designed to be used by Siddhi Java Library for its internal work will not be wrapped. Python doesn't differentiate Integer from Long . But Siddhi do. Python 3 does not differentiate Integer and Long Data Types. All Python Integers fed into Siddhi (via InputHandler ) are converted into Java Integers . To feed Java Long to Siddhi (via InputHandler ), use DataTypes.LongType . All Long outputs received from Siddhi (via callbacks) will also be converted to DataTypes.LongType . Example: inputHandler.send([\"IBM\",700.0,LongType(100)]) Clean up everything when you are done. Remember to call shutdown of SiddhiManager and SiddhiAppRuntime . Java Siddhi to PySiddhi Mappings The PySiddhi wrapper is focused on functionality provided by siddhi-core . The classes in Java package io.siddhi.core are mapped to PySiddhi.core using hand written logic. These are not an auto-generated. The follow table demonstrates major mappings of PySiddhi. Java Class Python Import io.siddhi.core.SiddhiManager from PySiddhi.core.SiddhiManager import SiddhiManager io.siddhi.core.ExecutionPlanRuntime from PySiddhi.core.SiddhiAppRuntime import SiddhiAppRuntime io.siddhi.core.event.Event from PySiddhi.core.event.Event import Event io.siddhi.core.event.ComplexEvent from PySiddhi.core.event.ComplexEvent import ComplexEvent io.siddhi.core.stream.input.InputHandler from PySiddhi.core.stream.input.InputHandler import InputHandler io.siddhi.core.stream.output.StreamCallback from PySiddhi.core.stream.output.StreamCallback import StreamCallback io.siddhi.core.query.output.callback.QueryCallback from PySiddhi.core.query.output.callback.QueryCallback import QueryCallback io.siddhi.core.debugger.SiddhiDebugger from PySiddhi.core.debugger.SiddhiDebugger import SiddhiDebugger io.siddhi.core.debugger.SiddhiDebuggerCallback from PySiddhi-3.core.debugger.SiddhiDebuggerCallback import SiddhiDebuggerCallback io.siddhi.core.util.EventPrinter import PySiddhi.core.util.EventPrinter","title":"Advanced Concepts"},{"location":"Using-Siddhi-from-Python/#advanced-concepts-of-pysiddhi","text":"","title":"Advanced Concepts of PySiddhi"},{"location":"Using-Siddhi-from-Python/#key-points","text":"The PySiddhi API is a wrapper on Siddhi Java Library, exposing it's core features to Python. It is important to keep following points in mind when using PySiddhi API. It is a wrapper. Not a port. - Whenever you use the PySiddhi API, the Siddhi Java Library is loaded in background using Java Virtual Machine. The wrapper is focused on functionality provided by siddhi-core which is found in package io.siddhi.core . The future versions of API may have the ability to load Siddhi Extensions directly from Java Packages and use them in Siddhi Queries. However, the individual Java classes of extensions will not be wrapped. Only the classes that are required for API users are wrapped. Classes which are designed to be used by Siddhi Java Library for its internal work will not be wrapped. Python doesn't differentiate Integer from Long . But Siddhi do. Python 3 does not differentiate Integer and Long Data Types. All Python Integers fed into Siddhi (via InputHandler ) are converted into Java Integers . To feed Java Long to Siddhi (via InputHandler ), use DataTypes.LongType . All Long outputs received from Siddhi (via callbacks) will also be converted to DataTypes.LongType . Example: inputHandler.send([\"IBM\",700.0,LongType(100)]) Clean up everything when you are done. Remember to call shutdown of SiddhiManager and SiddhiAppRuntime .","title":"Key Points"},{"location":"Using-Siddhi-from-Python/#java-siddhi-to-pysiddhi-mappings","text":"The PySiddhi wrapper is focused on functionality provided by siddhi-core . The classes in Java package io.siddhi.core are mapped to PySiddhi.core using hand written logic. These are not an auto-generated. The follow table demonstrates major mappings of PySiddhi. Java Class Python Import io.siddhi.core.SiddhiManager from PySiddhi.core.SiddhiManager import SiddhiManager io.siddhi.core.ExecutionPlanRuntime from PySiddhi.core.SiddhiAppRuntime import SiddhiAppRuntime io.siddhi.core.event.Event from PySiddhi.core.event.Event import Event io.siddhi.core.event.ComplexEvent from PySiddhi.core.event.ComplexEvent import ComplexEvent io.siddhi.core.stream.input.InputHandler from PySiddhi.core.stream.input.InputHandler import InputHandler io.siddhi.core.stream.output.StreamCallback from PySiddhi.core.stream.output.StreamCallback import StreamCallback io.siddhi.core.query.output.callback.QueryCallback from PySiddhi.core.query.output.callback.QueryCallback import QueryCallback io.siddhi.core.debugger.SiddhiDebugger from PySiddhi.core.debugger.SiddhiDebugger import SiddhiDebugger io.siddhi.core.debugger.SiddhiDebuggerCallback from PySiddhi-3.core.debugger.SiddhiDebuggerCallback import SiddhiDebuggerCallback io.siddhi.core.util.EventPrinter import PySiddhi.core.util.EventPrinter","title":"Java Siddhi to PySiddhi Mappings"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"}]}